parameter (or :_entries (unit %_Liq_entry_main) (or (unit %_Liq_entry_deposit) (or (nat %_Liq_entry_withdraw) (or (bytes %_Liq_entry_tokenFallback) (or (pair %_Liq_entry_tokenWithdraw address nat) (pair %_Liq_entry_trade bytes signature)))))) ; storage (map bytes nat) ; code { DUP ; DIP { CDR ; } ; CAR ; DUP @parameter ; IF_LEFT { DROP ; DUUP ; NIL operation ; PAIR ; } { IF_LEFT { RENAME @parameter_slash_5 ; PUSH mutez 1000000 ; AMOUNT @amount ; EDIV @amount_nat_option ; IF_NONE { UNIT ; FAILWITH ; } { DUUUUP @storage ; DUUP @amount_nat_tuple ; CAR @amount_nat ; PUSH int 0 ; SENDER @sender ; PAIR ; PACK @key ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE @storage ; NIL operation ; PAIR ; } ; DIP { DROP ; } ; } { IF_LEFT { RENAME @parameter_slash_16 ; DUUUP @storage ; SENDER @sender ; PUSH int 0 ; DUUP @sender ; PAIR ; PACK @key ; DUUUP @storage ; DUUP @key ; GET ; IF_NONE { PUSH string "Not enough balance" ; FAILWITH ; } { DUUUUUP @parameter ; DUUP @value ; SUB ; DUP ; ABS ; SWAP ; GE ; IF { DUUUUP @sender ; CONTRACT @_contract unit ; IF_NONE { UNIT ; FAILWITH ; } { DUP @contr ; PUSH mutez 1000000 ; DUUUUUUUUUP @parameter ; MUL ; UNIT ; TRANSFER_TOKENS @op ; DUUUUUUUP @storage ; DUUUUP @p ; DUUUUUUUP @key ; DIP { SOME ; } ; DIIIIP { DROP ; } ; UPDATE @storage ; NIL operation ; DUUUP ; DIIIP { DROP ; } ; CONS ; PAIR ; } ; DIP { DROP ; } ; } { DUP @m ; PUSH string "Not enough balance" ; PAIR ; FAILWITH ; } ; DIP { DROP ; } ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; } { IF_LEFT { RENAME @parameter_slash_27 ; DUP @parameter ; UNPACK (pair address nat) ; IF_NONE { PUSH string "Cannot unpack bytes" ; FAILWITH ; } { DUP @data ; DUUUUUP @storage ; DUUP ; CDR @value ; SENDER @tokenAddress ; DUUUUP ; CAR @sender ; PAIR ; PACK @key ; DIP { SOME ; } ; DIIIP { DROP ; DROP ; } ; UPDATE @storage ; NIL operation ; PAIR ; } ; DIP { DROP ; } ; } { IF_LEFT { RENAME @parameter_slash_36 ; DUUUP @storage ; DUUP @parameter ; DUP ; CAR @tokenAddress ; DUUP ; CDR @amount ; SENDER @sender ; DUUUP @tokenAddress ; DUUP @sender ; PAIR ; PACK @key ; DUUUUUUP @storage ; DUUP @key ; GET ; IF_NONE { PUSH string "Not enough balace" ; FAILWITH ; } { DUUUUP @amount ; DUUP @value ; SUB ; DUP ; ABS ; SWAP ; GE ; IF { DUUUUUUP @tokenAddress ; CONTRACT @_contract bytes ; IF_NONE { UNIT ; FAILWITH ; } { DUP @contr ; PUSH mutez 0 ; PUSH bool False ; DUUUUUUUUUP @amount ; PAIR ; DUUUUUUUUP @sender ; PAIR ; PACK @args ; TRANSFER_TOKENS @op ; DUUUUUUUUUUP @storage ; DUUUUP @p ; DUUUUUUUP @key ; DIP { SOME ; } ; DIIIIP { DROP ; } ; UPDATE @storage ; NIL operation ; DUUUP ; DIIIP { DROP ; } ; CONS ; PAIR ; } ; DIP { DROP ; } ; } { DUP @m ; PUSH string "Not enough balance" ; PAIR ; FAILWITH ; } ; DIP { DROP ; } ; } ; DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; } { RENAME @parameter_slash_51 ; DUUUP @storage ; DUUP @parameter ; DUP ; CAR @data ; DUP @data ; UNPACK (pair key (pair address (pair address (pair nat nat)))) ; IF_NONE { PUSH string "Wrong arguments" ; FAILWITH ; } { DUP @args ; DUP ; CAR @pub_key ; DUUP ; CDAR @tokenGet ; DUUUP ; CDDDAR @amountGet ; PUSH bool True ; DUUUUUUUP @data ; SHA256 @hash ; DUUUUUUUUUP ; CDR @sign ; DUUUUUUP @pub_key ; CHECK_SIGNATURE @success ; COMPARE ; NEQ ; IF { PUSH string "Wrong signature" ; FAILWITH ; } { UNIT ; } ; DROP ; DUUP @tokenGet ; SENDER @sender ; PAIR ; PACK @key1 ; DUUUP @tokenGet ; DUUUUUP @pub_key ; HASH_KEY @key_hash ; IMPLICIT_ACCOUNT @market_maker ; PAIR ; PACK @key2 ; DUUUUUUUUUUP @storage ; DUUUP @key1 ; GET ; IF_NONE { UNIT ; FAILWITH ; } { DUUUUP @amountGet ; DUUP @tokenGet_bal ; SUB ; DUP ; ABS ; SWAP ; GE ; IF { DUUUUUUUUUUUUP @storage ; DUUP @p ; DUUUUUUP @key1 ; DIP { SOME ; } ; UPDATE @storage ; DUP @storage ; DUUUUUP @key2 ; GET ; IF_NONE { UNIT ; FAILWITH ; } { DUUP @storage ; DUUUUUUUUP @amountGet ; DUUUP @tokenGet_bal_ ; ADD ; DUUUUUUUP @key2 ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE @storage ; NIL operation ; PAIR ; } ; DIP { DROP ; DROP ; } ; } { DUP @m ; PUSH string "Not enough balance" ; PAIR ; FAILWITH ; } ; DIP { DROP ; } ; } ; DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; } ; } ; } ; } ; } ; DIP { DROP ; DROP ; } ; } ; 
