parameter (or :_entries (unit %_Liq_entry_main) (or (unit %_Liq_entry_deposit) (or (nat %_Liq_entry_withdraw) (or (bytes %_Liq_entry_tokenFallback) (or (pair %_Liq_entry_tokenWithdraw address nat) (pair %_Liq_entry_trade bytes signature)))))) ; storage (map address (pair :balance (nat %tezzies) (map %tokens address nat))) ; code { DUP ; DIP { CDR @storage_slash_1 ; } ; CAR @parameter_slash_2 ; LAMBDA @get_balance (pair address (map address (pair :balance (nat %tezzies) (map %tokens address nat)))) (pair :balance (nat %tezzies) (map %tokens address nat)) { RENAME @_a_storage_slash_3 ; DUP ; CDR @storage ; DUUP ; CAR @a ; GET ; IF_NONE { PUSH (map address nat) {} ; PUSH nat 0 ; PAIR %tezzies %tokens ; } {} ; DIP { DROP ; } ; } ; DUUP @parameter ; IF_LEFT { DROP ; DUUUP ; NIL operation ; PAIR ; } { IF_LEFT { RENAME @parameter_slash_14 ; DUUUUP @storage ; SENDER @sender ; PUSH mutez 1000000 ; AMOUNT @amount ; EDIV @amount_nat_option ; IF_NONE { UNIT ; FAILWITH ; } { DUUUP @storage ; DUUUUUUP @get_balance ; DUUUUUP @storage ; DUUUUUP @sender ; PAIR ; EXEC @sender_balance ; CDR %tokens ; DUUUP @amount_nat_tuple ; CAR @amount_nat ; PAIR @new_sender_balance %tezzies %tokens ; DUUUUP @sender ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE @storage ; NIL operation ; PAIR ; } ; DIP { DROP ; DROP ; DROP ; } ; } { IF_LEFT { RENAME @parameter_slash_26 ; DUUUUP @storage ; SENDER @sender ; DUUUUP @get_balance ; DUUUP @storage ; DUUUP @sender ; PAIR ; EXEC @sender_balance ; DUUP @sender ; CONTRACT @_contract unit ; IF_NONE { UNIT ; FAILWITH ; } { DUP @contr ; PUSH mutez 1000000 ; DUUUUUUUP @parameter ; MUL ; UNIT ; TRANSFER_TOKENS @op ; DUUUUUP @storage ; DUUUUUUUP @parameter ; DUUUUUP @sender_balance ; CAR %tezzies ; SUB ; ISNAT ; IF_NONE { PUSH string "Not enough balance" ; FAILWITH ; } { DUUUUUP @sender_balance ; CDR %tokens ; SWAP ; PAIR %tezzies %tokens ; } ; RENAME @new_sender_balance ; DUUUUUUP @sender ; DIP { SOME ; } ; DIIIIP { DROP ; } ; UPDATE @storage ; NIL operation ; DUUUP ; DIIIP { DROP ; } ; CONS ; PAIR ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; } { IF_LEFT { RENAME @parameter_slash_36 ; DUUUUP @storage ; DUUP @parameter ; UNPACK (pair address nat) ; IF_NONE { PUSH string "Cannot unpack bytes" ; FAILWITH ; } { DUP @data ; DUP ; CAR @sender ; DUUP ; CDR @amount ; SENDER @token_address ; DUUUUUUUUP @get_balance ; DUUUUUUUP @storage ; DUUUUUP @sender ; PAIR ; EXEC @sender_balance ; DUUUUUUUP @storage ; DUUP @sender_balance ; CAR %tezzies ; DUUUP @sender_balance ; CDR %tokens ; DUUUUUUUP @sender ; GET ; IF_NONE { DUUUP @sender_balance ; CDR %tokens ; DUUUUUUP @amount ; DUUUUUUP @token_address ; DIP { SOME ; } ; UPDATE ; } { DUUUUP @sender_balance ; CDR %tokens ; DUUUUUUUP @amount ; DUUUP @b ; ADD ; DUUUUUUUP @token_address ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE ; } ; RENAME @new_sender_balance ; SWAP ; PAIR @sender_balance %tezzies %tokens ; DUUUUUUP @sender ; DIP { SOME ; } ; DIIIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; UPDATE @storage ; NIL operation ; PAIR ; } ; DIP { DROP ; DROP ; } ; } { IF_LEFT { RENAME @parameter_slash_48 ; DUUUUP @storage ; DUUP @parameter ; DUP ; CAR @token_address ; DUUP ; CDR @amount ; SENDER @sender ; DUUUUUUUP @get_balance ; DUUUUUUP @storage ; DUUUP @sender ; PAIR ; EXEC @sender_balance ; DUUUUP @token_address ; CONTRACT @_contract bytes ; IF_NONE { UNIT ; FAILWITH ; } { DUP @contr ; PUSH mutez 0 ; PUSH bool False ; DUUUUUUUP @amount ; PAIR ; DUUUUUUP @sender ; PAIR ; PACK @args ; TRANSFER_TOKENS @op ; DUUUUUUUUP @storage ; DUUUUP @sender_balance ; CAR %tezzies ; DUUUUUP @sender_balance ; CDR %tokens ; DUUUUUUUUUP @token_address ; GET ; IF_NONE { PUSH string "Not enough balance" ; FAILWITH ; } { DUUUUUUUUP @amount ; DUUP @b ; SUB ; ISNAT ; IF_NONE { PUSH string "Not enough balance" ; FAILWITH ; } { DUUUUUUUP @sender_balance ; CDR %tokens ; DUUP @n ; DUUUUUUUUUUUUP @token_address ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE ; } ; DIP { DROP ; } ; } ; RENAME @new_sender_balance ; SWAP ; PAIR @sender_balance %tezzies %tokens ; DUUUUUUP @sender ; DIP { SOME ; } ; DIIIIP { DROP ; } ; UPDATE @storage ; NIL operation ; DUUUP ; DIIIP { DROP ; } ; CONS ; PAIR ; } ; DIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; } { RENAME @parameter_slash_64 ; DUUUUP @storage ; DUUP @parameter ; DUP ; CAR @data ; SENDER @taker ; DUUP @data ; UNPACK (pair key (pair address (pair address (pair nat nat)))) ; IF_NONE { PUSH string "Wrong arguments" ; FAILWITH ; } { DUP @args ; DUP ; CAR @pub_key ; DUUP ; CDDAR @tokenGive ; DUUUP ; CDDDDR @amountGive ; PUSH bool True ; DUUUUUUUUP @data ; SHA256 @hash ; DUUUUUUUUUUP ; CDR @sign ; DUUUUUUP @pub_key ; CHECK_SIGNATURE @success ; COMPARE ; NEQ ; IF { PUSH string "Wrong signature" ; FAILWITH ; } { UNIT ; } ; DROP ; DUUUP @pub_key ; HASH_KEY @key_hash ; IMPLICIT_ACCOUNT @account ; ADDRESS ; DUUUUUUUUUUUUP @get_balance ; DUUUUUUUUUUUP @storage ; DUUUP @maker ; PAIR ; EXEC @maker_balance ; DUUUUUUUUUUUUUP @get_balance ; DUUUUUUUUUUUUP @storage ; DUUUUUUUUUUP @taker ; PAIR ; EXEC @taker_balance ; DUP @taker_balance ; CDR %tokens ; DUUUUUUUUP ; CDAR @tokenGet ; GET ; IF_NONE { PUSH string "Taker doesn't have enough balance" ; FAILWITH ; } { DUUUUUUUUP ; CDDDAR @amountGet ; DUUP @b ; SUB ; ISNAT ; IF_NONE { PUSH string "Taker doesn't have enough balance" ; FAILWITH ; } { DUUUP @taker_balance ; CDR %tokens ; DUUP @n ; DUUUUUUUUUUUUUP @taker ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE ; } ; DIP { DROP ; } ; } ; RENAME @new_taker_balance ; DUUUUUUUUUUUUUP @storage ; DUUUUP @maker_balance ; CAR %tezzies ; DUUUUUP @maker_balance ; CDR %tokens ; DUUUUUUUUUP @tokenGive ; GET ; IF_NONE { PUSH string "Maker doesn't have enough balance" ; FAILWITH ; } { DUUUUUUUUP @amountGive ; DUUP @b ; SUB ; ISNAT ; IF_NONE { PUSH string "Maker doesn't have enough balance" ; FAILWITH ; } { DUUUUUUUP @maker_balance ; CDR %tokens ; DUUP @n ; DUUUUUUUUUUUUP @tokenGive ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE ; } ; DIP { DROP ; } ; } ; RENAME @new_maker_balance ; SWAP ; PAIR @maker_balance %tezzies %tokens ; DUUUUUUP @maker ; DIP { SOME ; } ; UPDATE @storage ; DUUUP @taker_balance ; CAR %tezzies ; DUUUUP @taker_balance ; CDR %tokens ; DUUUUUUUUUP @tokenGive ; GET ; IF_NONE { DUUUUP @taker_balance ; CDR %tokens ; DUUUUUUUUP @amountGive ; DUUUUUUUUUUP @tokenGive ; DIP { SOME ; } ; UPDATE ; } { DUUUUUP @taker_balance ; CDR %tokens ; DUUP @n ; DUUUUUUUUUUP @amountGive ; ADD ; DUUUUUUUUUUUP @tokenGive ; DIP { SOME ; } ; DIIIP { DROP ; } ; UPDATE ; } ; RENAME @new_taker_balance ; SWAP ; PAIR @taker_balance %tezzies %tokens ; DUUUUUUUUUUUUP @taker ; DIP { SOME ; } ; DIIIP { DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; DROP ; } ; UPDATE @storage ; NIL operation ; PAIR ; } ; DIP { DROP ; DROP ; DROP ; DROP ; DROP ; } ; } ; } ; } ; } ; } ; DIP { DROP ; DROP ; DROP ; } ; } ; 
